/*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the 'License');
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

/* global test, expect */

import { BackgroundColor } from "../index";

// Test simple generation in all color spaces
test('should generate 101 grayscale colors in default LAB colorspace)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'] }).backgroundColorScale;

  expect(colors).toEqual(['#000000', '#020202', '#060606', '#0a0a0a', '#0d0d0d', '#101010', '#131313', '#151515', '#171717', '#191919', '#1b1b1b', '#1d1d1d', '#1f1f1f', '#212121', '#232323', '#252525', '#272727', '#292929', '#2b2b2b', '#2e2e2e', '#303030', '#323232', '#343434', '#363636', '#383838', '#3b3b3b', '#3d3d3d', '#3f3f3f', '#414141', '#444444', '#464646', '#484848', '#4b4b4b', '#4d4d4d', '#4f4f4f', '#525252', '#545454', '#565656', '#595959', '#5b5b5b', '#5e5e5e', '#606060', '#626262', '#656565', '#676767', '#6a6a6a', '#6c6c6c', '#6f6f6f', '#717171', '#747474', '#767676', '#797979', '#7b7b7b', '#7e7e7e', '#808080', '#838383', '#858585', '#888888', '#8b8b8b', '#8d8d8d', '#909090', '#929292', '#959595', '#989898', '#9a9a9a', '#9d9d9d', '#a0a0a0', '#a2a2a2', '#a5a5a5', '#a8a8a8', '#aaaaaa', '#adadad', '#b0b0b0', '#b2b2b2', '#b5b5b5', '#b8b8b8', '#bababa', '#bdbdbd', '#c0c0c0', '#c3c3c3', '#c5c5c5', '#c8c8c8', '#cbcbcb', '#cecece', '#d1d1d1', '#d3d3d3', '#d6d6d6', '#d9d9d9', '#dcdcdc', '#dfdfdf', '#e1e1e1', '#e4e4e4', '#e7e7e7', '#eaeaea', '#ededed', '#f0f0f0', '#f3f3f3', '#f5f5f5', '#f8f8f8', '#fbfbfb', '#ffffff']);
});

test('should generate 101 blue toned grayscale colors in HSL space)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#4a5b7b', '#72829c', '#a6b2c6'], colorspace: 'HSL' }).backgroundColorScale;

  expect(colors).toEqual(['#000000', '#020203', '#050608', '#080a0d', '#0a0d11', '#0d1015', '#0f1319', '#11151c', '#12171f', '#141921', '#161b24', '#171d27', '#191f29', '#1b212c', '#1c232f', '#1e2532', '#202735', '#222938', '#242c3b', '#252e3e', '#273040', '#283243', '#2a3446', '#2c374a', '#2e394c', '#303b4f', '#313d52', '#333f56', '#354259', '#37445c', '#39465e', '#3b4862', '#3d4b65', '#3e4d68', '#41506c', '#43526f', '#445471', '#465775', '#4a5b7b', '#4b5c7c', '#4c5e7e', '#4f6080', '#516383', '#536585', '#566887', '#586a89', '#5b6d8c', '#5d6f8e', '#5f7291', '#627493', '#657795', '#687a98', '#6a7c99', '#6e7f9a', '#72829c', '#74849d', '#7686a0', '#7989a2', '#7c8ba5', '#7e8ea7', '#8291a9', '#8493ab', '#8796ae', '#8a98b0', '#8c9bb2', '#909eb5', '#93a0b7', '#95a3b9', '#98a6bc', '#9ba8be', '#9eabc0', '#a1aec2', '#a6b2c6', '#a7b3c6', '#aab6c9', '#aeb9cb', '#b0bbcc', '#b4becf', '#b7c0d1', '#bac3d3', '#bdc6d4', '#c0c9d7', '#c4ccd9', '#c6cedb', '#c9d1dd', '#cdd4df', '#d0d7e1', '#d3d9e3', '#d6dce5', '#d9dfe7', '#dde2e9', '#e1e5ec', '#e3e7ed', '#e6eaef', '#eaedf1', '#edf0f4', '#f1f2f6', '#f4f5f8', '#f7f8fa', '#fafbfc', '#ffffff']);
});

test('should generate 101 blue toned grayscale colors in LAB space)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#4a5b7b', '#72829c', '#a6b2c6'], colorspace: 'LAB' }).backgroundColorScale;

  expect(colors).toEqual(['#000000', '#020203', '#050608', '#090a0d', '#0b0d10', '#0e1014', '#111317', '#131519', '#15171c', '#16191e', '#181b21', '#191d24', '#1b1f27', '#1d212a', '#1e232c', '#20252f', '#212732', '#232935', '#252c39', '#272e3b', '#28303e', '#2a3241', '#2c3444', '#2e3647', '#30394b', '#313b4e', '#333d51', '#343f54', '#374257', '#38445a', '#3a465d', '#3c4861', '#3e4b64', '#3f4d67', '#414f6b', '#43526e', '#445471', '#475775', '#4a5b7b', '#4b5c7b', '#4d5e7d', '#4f607f', '#526381', '#546583', '#576886', '#596a88', '#5c6d8a', '#5e6f8c', '#62728e', '#647490', '#667792', '#697995', '#6c7c97', '#6f7f99', '#72829c', '#74849d', '#7686a0', '#7989a2', '#7c8ca4', '#7f8ea6', '#8291a9', '#8493ab', '#8796ad', '#8a98b0', '#8d9bb2', '#909eb4', '#93a0b6', '#95a3b9', '#99a6bb', '#9ca8be', '#9eabc0', '#a1aec2', '#a6b2c6', '#a7b3c6', '#aab6c9', '#aeb9cb', '#b0bbcc', '#b3becf', '#b7c0d1', '#bac3d3', '#bdc6d5', '#c0c9d7', '#c4ccd9', '#c6cedb', '#cad1dd', '#cdd4df', '#d1d7e1', '#d3d9e3', '#d6dce5', '#dadfe7', '#dde2e9', '#e1e5ec', '#e3e7ed', '#e7eaef', '#eaedf1', '#edf0f4', '#f1f2f6', '#f4f5f8', '#f7f8fa', '#fafbfc', '#ffffff']);
});

test('should generate 101 blue colors in HSLuv space)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#6FA7FF', '#B5E6FF'], colorspace: 'HSLuv' }).backgroundColorScale;

  expect(colors).toEqual(['#000000', '#000208', '#000613', '#000a1b', '#000d21', '#001025', '#00132a', '#00152e', '#001732', '#001935', '#001b38', '#001d3c', '#001f3f', '#002143', '#002347', '#00254b', '#00284f', '#002a52', '#002c56', '#002e59', '#00305d', '#003260', '#003465', '#003769', '#00396c', '#003b70', '#003d74', '#004078', '#00427c', '#00447f', '#004684', '#004988', '#004b8b', '#004d90', '#005094', '#005297', '#00559c', '#0057a0', '#0059a4', '#005ca9', '#005eac', '#0061b1', '#0063b5', '#0066ba', '#0068bd', '#006ac2', '#006dc6', '#0070cb', '#0072ce', '#0074d3', '#0077d7', '#0079dc', '#007ce0', '#007fe5', '#0081e8', '#0084ee', '#0086f2', '#0089f6', '#008cfb', '#058efe', '#2591fe', '#3393fe', '#3e96fe', '#4999fe', '#4f9bfe', '#589efe', '#5fa0fe', '#65a3fe', '#6fa7ff', '#6fa9fe', '#70acfe', '#71b0fe', '#72b3fe', '#75b7fe', '#77bafe', '#79bdfe', '#7cc0fe', '#7fc4fe', '#82c7fe', '#86cafe', '#8acdfe', '#8ed0fe', '#92d3fe', '#96d5fe', '#9ad8fe', '#9fdbfe', '#a4defe', '#aae0fe', '#aee3fe', '#b5e6ff', '#bce8fe', '#c2eaff', '#c9ecff', '#d1eeff', '#d8f0ff', '#def3ff', '#e4f5ff', '#eaf7ff', '#f1faff', '#f7fcff', '#ffffff']);
});

// Test output changes
test('should generate 101 grayscale colors with RGB output)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'], output: 'RGB' }).backgroundColorScale;

  expect(colors).toEqual(['rgb(0, 0, 0)', 'rgb(2, 2, 2)', 'rgb(6, 6, 6)', 'rgb(10, 10, 10)', 'rgb(13, 13, 13)', 'rgb(16, 16, 16)', 'rgb(19, 19, 19)', 'rgb(21, 21, 21)', 'rgb(23, 23, 23)', 'rgb(25, 25, 25)', 'rgb(27, 27, 27)', 'rgb(29, 29, 29)', 'rgb(31, 31, 31)', 'rgb(33, 33, 33)', 'rgb(35, 35, 35)', 'rgb(37, 37, 37)', 'rgb(39, 39, 39)', 'rgb(41, 41, 41)', 'rgb(43, 43, 43)', 'rgb(46, 46, 46)', 'rgb(48, 48, 48)', 'rgb(50, 50, 50)', 'rgb(52, 52, 52)', 'rgb(54, 54, 54)', 'rgb(56, 56, 56)', 'rgb(59, 59, 59)', 'rgb(61, 61, 61)', 'rgb(63, 63, 63)', 'rgb(65, 65, 65)', 'rgb(68, 68, 68)', 'rgb(70, 70, 70)', 'rgb(72, 72, 72)', 'rgb(75, 75, 75)', 'rgb(77, 77, 77)', 'rgb(79, 79, 79)', 'rgb(82, 82, 82)', 'rgb(84, 84, 84)', 'rgb(86, 86, 86)', 'rgb(89, 89, 89)', 'rgb(91, 91, 91)', 'rgb(94, 94, 94)', 'rgb(96, 96, 96)', 'rgb(98, 98, 98)', 'rgb(101, 101, 101)', 'rgb(103, 103, 103)', 'rgb(106, 106, 106)', 'rgb(108, 108, 108)', 'rgb(111, 111, 111)', 'rgb(113, 113, 113)', 'rgb(116, 116, 116)', 'rgb(118, 118, 118)', 'rgb(121, 121, 121)', 'rgb(123, 123, 123)', 'rgb(126, 126, 126)', 'rgb(128, 128, 128)', 'rgb(131, 131, 131)', 'rgb(133, 133, 133)', 'rgb(136, 136, 136)', 'rgb(139, 139, 139)', 'rgb(141, 141, 141)', 'rgb(144, 144, 144)', 'rgb(146, 146, 146)', 'rgb(149, 149, 149)', 'rgb(152, 152, 152)', 'rgb(154, 154, 154)', 'rgb(157, 157, 157)', 'rgb(160, 160, 160)', 'rgb(162, 162, 162)', 'rgb(165, 165, 165)', 'rgb(168, 168, 168)', 'rgb(170, 170, 170)', 'rgb(173, 173, 173)', 'rgb(176, 176, 176)', 'rgb(178, 178, 178)', 'rgb(181, 181, 181)', 'rgb(184, 184, 184)', 'rgb(186, 186, 186)', 'rgb(189, 189, 189)', 'rgb(192, 192, 192)', 'rgb(195, 195, 195)', 'rgb(197, 197, 197)', 'rgb(200, 200, 200)', 'rgb(203, 203, 203)', 'rgb(206, 206, 206)', 'rgb(209, 209, 209)', 'rgb(211, 211, 211)', 'rgb(214, 214, 214)', 'rgb(217, 217, 217)', 'rgb(220, 220, 220)', 'rgb(223, 223, 223)', 'rgb(225, 225, 225)', 'rgb(228, 228, 228)', 'rgb(231, 231, 231)', 'rgb(234, 234, 234)', 'rgb(237, 237, 237)', 'rgb(240, 240, 240)', 'rgb(243, 243, 243)', 'rgb(245, 245, 245)', 'rgb(248, 248, 248)', 'rgb(251, 251, 251)', 'rgb(255, 255, 255)']);
});
test('should generate 101 grayscale colors with RGB output)', () => {
  const color = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'] });
  color.output = 'RGB';
  const colors = color.backgroundColorScale;

  expect(colors).toEqual(['rgb(0, 0, 0)', 'rgb(2, 2, 2)', 'rgb(6, 6, 6)', 'rgb(10, 10, 10)', 'rgb(13, 13, 13)', 'rgb(16, 16, 16)', 'rgb(19, 19, 19)', 'rgb(21, 21, 21)', 'rgb(23, 23, 23)', 'rgb(25, 25, 25)', 'rgb(27, 27, 27)', 'rgb(29, 29, 29)', 'rgb(31, 31, 31)', 'rgb(33, 33, 33)', 'rgb(35, 35, 35)', 'rgb(37, 37, 37)', 'rgb(39, 39, 39)', 'rgb(41, 41, 41)', 'rgb(43, 43, 43)', 'rgb(46, 46, 46)', 'rgb(48, 48, 48)', 'rgb(50, 50, 50)', 'rgb(52, 52, 52)', 'rgb(54, 54, 54)', 'rgb(56, 56, 56)', 'rgb(59, 59, 59)', 'rgb(61, 61, 61)', 'rgb(63, 63, 63)', 'rgb(65, 65, 65)', 'rgb(68, 68, 68)', 'rgb(70, 70, 70)', 'rgb(72, 72, 72)', 'rgb(75, 75, 75)', 'rgb(77, 77, 77)', 'rgb(79, 79, 79)', 'rgb(82, 82, 82)', 'rgb(84, 84, 84)', 'rgb(86, 86, 86)', 'rgb(89, 89, 89)', 'rgb(91, 91, 91)', 'rgb(94, 94, 94)', 'rgb(96, 96, 96)', 'rgb(98, 98, 98)', 'rgb(101, 101, 101)', 'rgb(103, 103, 103)', 'rgb(106, 106, 106)', 'rgb(108, 108, 108)', 'rgb(111, 111, 111)', 'rgb(113, 113, 113)', 'rgb(116, 116, 116)', 'rgb(118, 118, 118)', 'rgb(121, 121, 121)', 'rgb(123, 123, 123)', 'rgb(126, 126, 126)', 'rgb(128, 128, 128)', 'rgb(131, 131, 131)', 'rgb(133, 133, 133)', 'rgb(136, 136, 136)', 'rgb(139, 139, 139)', 'rgb(141, 141, 141)', 'rgb(144, 144, 144)', 'rgb(146, 146, 146)', 'rgb(149, 149, 149)', 'rgb(152, 152, 152)', 'rgb(154, 154, 154)', 'rgb(157, 157, 157)', 'rgb(160, 160, 160)', 'rgb(162, 162, 162)', 'rgb(165, 165, 165)', 'rgb(168, 168, 168)', 'rgb(170, 170, 170)', 'rgb(173, 173, 173)', 'rgb(176, 176, 176)', 'rgb(178, 178, 178)', 'rgb(181, 181, 181)', 'rgb(184, 184, 184)', 'rgb(186, 186, 186)', 'rgb(189, 189, 189)', 'rgb(192, 192, 192)', 'rgb(195, 195, 195)', 'rgb(197, 197, 197)', 'rgb(200, 200, 200)', 'rgb(203, 203, 203)', 'rgb(206, 206, 206)', 'rgb(209, 209, 209)', 'rgb(211, 211, 211)', 'rgb(214, 214, 214)', 'rgb(217, 217, 217)', 'rgb(220, 220, 220)', 'rgb(223, 223, 223)', 'rgb(225, 225, 225)', 'rgb(228, 228, 228)', 'rgb(231, 231, 231)', 'rgb(234, 234, 234)', 'rgb(237, 237, 237)', 'rgb(240, 240, 240)', 'rgb(243, 243, 243)', 'rgb(245, 245, 245)', 'rgb(248, 248, 248)', 'rgb(251, 251, 251)', 'rgb(255, 255, 255)']);
});

test('should generate 101 grayscale colors with HSL output)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'], output: 'HSL' }).backgroundColorScale;

  expect(colors).toEqual(['hsl(0deg, 0%, 0%)', 'hsl(0deg, 0%, 1%)', 'hsl(0deg, 0%, 2%)', 'hsl(0deg, 0%, 4%)', 'hsl(0deg, 0%, 5%)', 'hsl(0deg, 0%, 6%)', 'hsl(0deg, 0%, 7%)', 'hsl(0deg, 0%, 8%)', 'hsl(0deg, 0%, 9%)', 'hsl(0deg, 0%, 10%)', 'hsl(0deg, 0%, 11%)', 'hsl(0deg, 0%, 11%)', 'hsl(0deg, 0%, 12%)', 'hsl(0deg, 0%, 13%)', 'hsl(0deg, 0%, 14%)', 'hsl(0deg, 0%, 15%)', 'hsl(0deg, 0%, 15%)', 'hsl(0deg, 0%, 16%)', 'hsl(0deg, 0%, 17%)', 'hsl(0deg, 0%, 18%)', 'hsl(0deg, 0%, 19%)', 'hsl(0deg, 0%, 20%)', 'hsl(0deg, 0%, 20%)', 'hsl(0deg, 0%, 21%)', 'hsl(0deg, 0%, 22%)', 'hsl(0deg, 0%, 23%)', 'hsl(0deg, 0%, 24%)', 'hsl(0deg, 0%, 25%)', 'hsl(0deg, 0%, 25%)', 'hsl(0deg, 0%, 27%)', 'hsl(0deg, 0%, 27%)', 'hsl(0deg, 0%, 28%)', 'hsl(0deg, 0%, 29%)', 'hsl(0deg, 0%, 30%)', 'hsl(0deg, 0%, 31%)', 'hsl(0deg, 0%, 32%)', 'hsl(0deg, 0%, 33%)', 'hsl(0deg, 0%, 34%)', 'hsl(0deg, 0%, 35%)', 'hsl(0deg, 0%, 36%)', 'hsl(0deg, 0%, 37%)', 'hsl(0deg, 0%, 38%)', 'hsl(0deg, 0%, 38%)', 'hsl(0deg, 0%, 40%)', 'hsl(0deg, 0%, 40%)', 'hsl(0deg, 0%, 42%)', 'hsl(0deg, 0%, 42%)', 'hsl(0deg, 0%, 44%)', 'hsl(0deg, 0%, 44%)', 'hsl(0deg, 0%, 45%)', 'hsl(0deg, 0%, 46%)', 'hsl(0deg, 0%, 47%)', 'hsl(0deg, 0%, 48%)', 'hsl(0deg, 0%, 49%)', 'hsl(0deg, 0%, 50%)', 'hsl(0deg, 0%, 51%)', 'hsl(0deg, 0%, 52%)', 'hsl(0deg, 0%, 53%)', 'hsl(0deg, 0%, 55%)', 'hsl(0deg, 0%, 55%)', 'hsl(0deg, 0%, 56%)', 'hsl(0deg, 0%, 57%)', 'hsl(0deg, 0%, 58%)', 'hsl(0deg, 0%, 60%)', 'hsl(0deg, 0%, 60%)', 'hsl(0deg, 0%, 62%)', 'hsl(0deg, 0%, 63%)', 'hsl(0deg, 0%, 64%)', 'hsl(0deg, 0%, 65%)', 'hsl(0deg, 0%, 66%)', 'hsl(0deg, 0%, 67%)', 'hsl(0deg, 0%, 68%)', 'hsl(0deg, 0%, 69%)', 'hsl(0deg, 0%, 70%)', 'hsl(0deg, 0%, 71%)', 'hsl(0deg, 0%, 72%)', 'hsl(0deg, 0%, 73%)', 'hsl(0deg, 0%, 74%)', 'hsl(0deg, 0%, 75%)', 'hsl(0deg, 0%, 76%)', 'hsl(0deg, 0%, 77%)', 'hsl(0deg, 0%, 78%)', 'hsl(0deg, 0%, 80%)', 'hsl(0deg, 0%, 81%)', 'hsl(0deg, 0%, 82%)', 'hsl(0deg, 0%, 83%)', 'hsl(0deg, 0%, 84%)', 'hsl(0deg, 0%, 85%)', 'hsl(0deg, 0%, 86%)', 'hsl(0deg, 0%, 87%)', 'hsl(0deg, 0%, 88%)', 'hsl(0deg, 0%, 89%)', 'hsl(0deg, 0%, 91%)', 'hsl(0deg, 0%, 92%)', 'hsl(0deg, 0%, 93%)', 'hsl(0deg, 0%, 94%)', 'hsl(0deg, 0%, 95%)', 'hsl(0deg, 0%, 96%)', 'hsl(0deg, 0%, 97%)', 'hsl(0deg, 0%, 98%)', 'hsl(0deg, 0%, 100%)']);
});
test('should generate 101 grayscale colors with HSL output)', () => {
  const color = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'] });
  color.output = 'HSL';
  const colors = color.backgroundColorScale;

  expect(colors).toEqual(['hsl(0deg, 0%, 0%)', 'hsl(0deg, 0%, 1%)', 'hsl(0deg, 0%, 2%)', 'hsl(0deg, 0%, 4%)', 'hsl(0deg, 0%, 5%)', 'hsl(0deg, 0%, 6%)', 'hsl(0deg, 0%, 7%)', 'hsl(0deg, 0%, 8%)', 'hsl(0deg, 0%, 9%)', 'hsl(0deg, 0%, 10%)', 'hsl(0deg, 0%, 11%)', 'hsl(0deg, 0%, 11%)', 'hsl(0deg, 0%, 12%)', 'hsl(0deg, 0%, 13%)', 'hsl(0deg, 0%, 14%)', 'hsl(0deg, 0%, 15%)', 'hsl(0deg, 0%, 15%)', 'hsl(0deg, 0%, 16%)', 'hsl(0deg, 0%, 17%)', 'hsl(0deg, 0%, 18%)', 'hsl(0deg, 0%, 19%)', 'hsl(0deg, 0%, 20%)', 'hsl(0deg, 0%, 20%)', 'hsl(0deg, 0%, 21%)', 'hsl(0deg, 0%, 22%)', 'hsl(0deg, 0%, 23%)', 'hsl(0deg, 0%, 24%)', 'hsl(0deg, 0%, 25%)', 'hsl(0deg, 0%, 25%)', 'hsl(0deg, 0%, 27%)', 'hsl(0deg, 0%, 27%)', 'hsl(0deg, 0%, 28%)', 'hsl(0deg, 0%, 29%)', 'hsl(0deg, 0%, 30%)', 'hsl(0deg, 0%, 31%)', 'hsl(0deg, 0%, 32%)', 'hsl(0deg, 0%, 33%)', 'hsl(0deg, 0%, 34%)', 'hsl(0deg, 0%, 35%)', 'hsl(0deg, 0%, 36%)', 'hsl(0deg, 0%, 37%)', 'hsl(0deg, 0%, 38%)', 'hsl(0deg, 0%, 38%)', 'hsl(0deg, 0%, 40%)', 'hsl(0deg, 0%, 40%)', 'hsl(0deg, 0%, 42%)', 'hsl(0deg, 0%, 42%)', 'hsl(0deg, 0%, 44%)', 'hsl(0deg, 0%, 44%)', 'hsl(0deg, 0%, 45%)', 'hsl(0deg, 0%, 46%)', 'hsl(0deg, 0%, 47%)', 'hsl(0deg, 0%, 48%)', 'hsl(0deg, 0%, 49%)', 'hsl(0deg, 0%, 50%)', 'hsl(0deg, 0%, 51%)', 'hsl(0deg, 0%, 52%)', 'hsl(0deg, 0%, 53%)', 'hsl(0deg, 0%, 55%)', 'hsl(0deg, 0%, 55%)', 'hsl(0deg, 0%, 56%)', 'hsl(0deg, 0%, 57%)', 'hsl(0deg, 0%, 58%)', 'hsl(0deg, 0%, 60%)', 'hsl(0deg, 0%, 60%)', 'hsl(0deg, 0%, 62%)', 'hsl(0deg, 0%, 63%)', 'hsl(0deg, 0%, 64%)', 'hsl(0deg, 0%, 65%)', 'hsl(0deg, 0%, 66%)', 'hsl(0deg, 0%, 67%)', 'hsl(0deg, 0%, 68%)', 'hsl(0deg, 0%, 69%)', 'hsl(0deg, 0%, 70%)', 'hsl(0deg, 0%, 71%)', 'hsl(0deg, 0%, 72%)', 'hsl(0deg, 0%, 73%)', 'hsl(0deg, 0%, 74%)', 'hsl(0deg, 0%, 75%)', 'hsl(0deg, 0%, 76%)', 'hsl(0deg, 0%, 77%)', 'hsl(0deg, 0%, 78%)', 'hsl(0deg, 0%, 80%)', 'hsl(0deg, 0%, 81%)', 'hsl(0deg, 0%, 82%)', 'hsl(0deg, 0%, 83%)', 'hsl(0deg, 0%, 84%)', 'hsl(0deg, 0%, 85%)', 'hsl(0deg, 0%, 86%)', 'hsl(0deg, 0%, 87%)', 'hsl(0deg, 0%, 88%)', 'hsl(0deg, 0%, 89%)', 'hsl(0deg, 0%, 91%)', 'hsl(0deg, 0%, 92%)', 'hsl(0deg, 0%, 93%)', 'hsl(0deg, 0%, 94%)', 'hsl(0deg, 0%, 95%)', 'hsl(0deg, 0%, 96%)', 'hsl(0deg, 0%, 97%)', 'hsl(0deg, 0%, 98%)', 'hsl(0deg, 0%, 100%)']);
});

test('should generate 101 grayscale colors with HSV output)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'], output: 'HSV' }).backgroundColorScale;

  expect(colors).toEqual(['hsv(0deg, 0%, 0%)', 'hsv(0deg, 0%, 1%)', 'hsv(0deg, 0%, 2%)', 'hsv(0deg, 0%, 4%)', 'hsv(0deg, 0%, 5%)', 'hsv(0deg, 0%, 6%)', 'hsv(0deg, 0%, 7%)', 'hsv(0deg, 0%, 8%)', 'hsv(0deg, 0%, 9%)', 'hsv(0deg, 0%, 10%)', 'hsv(0deg, 0%, 11%)', 'hsv(0deg, 0%, 11%)', 'hsv(0deg, 0%, 12%)', 'hsv(0deg, 0%, 13%)', 'hsv(0deg, 0%, 14%)', 'hsv(0deg, 0%, 15%)', 'hsv(0deg, 0%, 15%)', 'hsv(0deg, 0%, 16%)', 'hsv(0deg, 0%, 17%)', 'hsv(0deg, 0%, 18%)', 'hsv(0deg, 0%, 19%)', 'hsv(0deg, 0%, 20%)', 'hsv(0deg, 0%, 20%)', 'hsv(0deg, 0%, 21%)', 'hsv(0deg, 0%, 22%)', 'hsv(0deg, 0%, 23%)', 'hsv(0deg, 0%, 24%)', 'hsv(0deg, 0%, 25%)', 'hsv(0deg, 0%, 25%)', 'hsv(0deg, 0%, 27%)', 'hsv(0deg, 0%, 27%)', 'hsv(0deg, 0%, 28%)', 'hsv(0deg, 0%, 29%)', 'hsv(0deg, 0%, 30%)', 'hsv(0deg, 0%, 31%)', 'hsv(0deg, 0%, 32%)', 'hsv(0deg, 0%, 33%)', 'hsv(0deg, 0%, 34%)', 'hsv(0deg, 0%, 35%)', 'hsv(0deg, 0%, 36%)', 'hsv(0deg, 0%, 37%)', 'hsv(0deg, 0%, 38%)', 'hsv(0deg, 0%, 38%)', 'hsv(0deg, 0%, 40%)', 'hsv(0deg, 0%, 40%)', 'hsv(0deg, 0%, 42%)', 'hsv(0deg, 0%, 42%)', 'hsv(0deg, 0%, 44%)', 'hsv(0deg, 0%, 44%)', 'hsv(0deg, 0%, 45%)', 'hsv(0deg, 0%, 46%)', 'hsv(0deg, 0%, 47%)', 'hsv(0deg, 0%, 48%)', 'hsv(0deg, 0%, 49%)', 'hsv(0deg, 0%, 50%)', 'hsv(0deg, 0%, 51%)', 'hsv(0deg, 0%, 52%)', 'hsv(0deg, 0%, 53%)', 'hsv(0deg, 0%, 55%)', 'hsv(0deg, 0%, 55%)', 'hsv(0deg, 0%, 56%)', 'hsv(0deg, 0%, 57%)', 'hsv(0deg, 0%, 58%)', 'hsv(0deg, 0%, 60%)', 'hsv(0deg, 0%, 60%)', 'hsv(0deg, 0%, 62%)', 'hsv(0deg, 0%, 63%)', 'hsv(0deg, 0%, 64%)', 'hsv(0deg, 0%, 65%)', 'hsv(0deg, 0%, 66%)', 'hsv(0deg, 0%, 67%)', 'hsv(0deg, 0%, 68%)', 'hsv(0deg, 0%, 69%)', 'hsv(0deg, 0%, 70%)', 'hsv(0deg, 0%, 71%)', 'hsv(0deg, 0%, 72%)', 'hsv(0deg, 0%, 73%)', 'hsv(0deg, 0%, 74%)', 'hsv(0deg, 0%, 75%)', 'hsv(0deg, 0%, 76%)', 'hsv(0deg, 0%, 77%)', 'hsv(0deg, 0%, 78%)', 'hsv(0deg, 0%, 80%)', 'hsv(0deg, 0%, 81%)', 'hsv(0deg, 0%, 82%)', 'hsv(0deg, 0%, 83%)', 'hsv(0deg, 0%, 84%)', 'hsv(0deg, 0%, 85%)', 'hsv(0deg, 0%, 86%)', 'hsv(0deg, 0%, 87%)', 'hsv(0deg, 0%, 88%)', 'hsv(0deg, 0%, 89%)', 'hsv(0deg, 0%, 91%)', 'hsv(0deg, 0%, 92%)', 'hsv(0deg, 0%, 93%)', 'hsv(0deg, 0%, 94%)', 'hsv(0deg, 0%, 95%)', 'hsv(0deg, 0%, 96%)', 'hsv(0deg, 0%, 97%)', 'hsv(0deg, 0%, 98%)', 'hsv(0deg, 0%, 100%)']);
});
test('should generate 101 grayscale colors with HSV output)', () => {
  const color = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'] });
  color.output = 'HSV';
  const colors = color.backgroundColorScale;

  expect(colors).toEqual(['hsv(0deg, 0%, 0%)', 'hsv(0deg, 0%, 1%)', 'hsv(0deg, 0%, 2%)', 'hsv(0deg, 0%, 4%)', 'hsv(0deg, 0%, 5%)', 'hsv(0deg, 0%, 6%)', 'hsv(0deg, 0%, 7%)', 'hsv(0deg, 0%, 8%)', 'hsv(0deg, 0%, 9%)', 'hsv(0deg, 0%, 10%)', 'hsv(0deg, 0%, 11%)', 'hsv(0deg, 0%, 11%)', 'hsv(0deg, 0%, 12%)', 'hsv(0deg, 0%, 13%)', 'hsv(0deg, 0%, 14%)', 'hsv(0deg, 0%, 15%)', 'hsv(0deg, 0%, 15%)', 'hsv(0deg, 0%, 16%)', 'hsv(0deg, 0%, 17%)', 'hsv(0deg, 0%, 18%)', 'hsv(0deg, 0%, 19%)', 'hsv(0deg, 0%, 20%)', 'hsv(0deg, 0%, 20%)', 'hsv(0deg, 0%, 21%)', 'hsv(0deg, 0%, 22%)', 'hsv(0deg, 0%, 23%)', 'hsv(0deg, 0%, 24%)', 'hsv(0deg, 0%, 25%)', 'hsv(0deg, 0%, 25%)', 'hsv(0deg, 0%, 27%)', 'hsv(0deg, 0%, 27%)', 'hsv(0deg, 0%, 28%)', 'hsv(0deg, 0%, 29%)', 'hsv(0deg, 0%, 30%)', 'hsv(0deg, 0%, 31%)', 'hsv(0deg, 0%, 32%)', 'hsv(0deg, 0%, 33%)', 'hsv(0deg, 0%, 34%)', 'hsv(0deg, 0%, 35%)', 'hsv(0deg, 0%, 36%)', 'hsv(0deg, 0%, 37%)', 'hsv(0deg, 0%, 38%)', 'hsv(0deg, 0%, 38%)', 'hsv(0deg, 0%, 40%)', 'hsv(0deg, 0%, 40%)', 'hsv(0deg, 0%, 42%)', 'hsv(0deg, 0%, 42%)', 'hsv(0deg, 0%, 44%)', 'hsv(0deg, 0%, 44%)', 'hsv(0deg, 0%, 45%)', 'hsv(0deg, 0%, 46%)', 'hsv(0deg, 0%, 47%)', 'hsv(0deg, 0%, 48%)', 'hsv(0deg, 0%, 49%)', 'hsv(0deg, 0%, 50%)', 'hsv(0deg, 0%, 51%)', 'hsv(0deg, 0%, 52%)', 'hsv(0deg, 0%, 53%)', 'hsv(0deg, 0%, 55%)', 'hsv(0deg, 0%, 55%)', 'hsv(0deg, 0%, 56%)', 'hsv(0deg, 0%, 57%)', 'hsv(0deg, 0%, 58%)', 'hsv(0deg, 0%, 60%)', 'hsv(0deg, 0%, 60%)', 'hsv(0deg, 0%, 62%)', 'hsv(0deg, 0%, 63%)', 'hsv(0deg, 0%, 64%)', 'hsv(0deg, 0%, 65%)', 'hsv(0deg, 0%, 66%)', 'hsv(0deg, 0%, 67%)', 'hsv(0deg, 0%, 68%)', 'hsv(0deg, 0%, 69%)', 'hsv(0deg, 0%, 70%)', 'hsv(0deg, 0%, 71%)', 'hsv(0deg, 0%, 72%)', 'hsv(0deg, 0%, 73%)', 'hsv(0deg, 0%, 74%)', 'hsv(0deg, 0%, 75%)', 'hsv(0deg, 0%, 76%)', 'hsv(0deg, 0%, 77%)', 'hsv(0deg, 0%, 78%)', 'hsv(0deg, 0%, 80%)', 'hsv(0deg, 0%, 81%)', 'hsv(0deg, 0%, 82%)', 'hsv(0deg, 0%, 83%)', 'hsv(0deg, 0%, 84%)', 'hsv(0deg, 0%, 85%)', 'hsv(0deg, 0%, 86%)', 'hsv(0deg, 0%, 87%)', 'hsv(0deg, 0%, 88%)', 'hsv(0deg, 0%, 89%)', 'hsv(0deg, 0%, 91%)', 'hsv(0deg, 0%, 92%)', 'hsv(0deg, 0%, 93%)', 'hsv(0deg, 0%, 94%)', 'hsv(0deg, 0%, 95%)', 'hsv(0deg, 0%, 96%)', 'hsv(0deg, 0%, 97%)', 'hsv(0deg, 0%, 98%)', 'hsv(0deg, 0%, 100%)']);
});

test('should generate 101 grayscale colors with LAB output)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'], output: 'LAB' }).backgroundColorScale;

  expect(colors).toEqual(['lab(0%, 0, 0)', 'lab(1%, 0, 0)', 'lab(2%, 0, 0)', 'lab(3%, 0, 0)', 'lab(4%, 0, 0)', 'lab(5%, 0, 0)', 'lab(6%, 0, 0)', 'lab(7%, 0, 0)', 'lab(8%, 0, 0)', 'lab(9%, 0, 0)', 'lab(10%, 0, 0)', 'lab(11%, 0, 0)', 'lab(12%, 0, 0)', 'lab(13%, 0, 0)', 'lab(14%, 0, 0)', 'lab(15%, 0, 0)', 'lab(16%, 0, 0)', 'lab(17%, 0, 0)', 'lab(18%, 0, 0)', 'lab(19%, 0, 0)', 'lab(20%, 0, 0)', 'lab(21%, 0, 0)', 'lab(22%, 0, 0)', 'lab(23%, 0, 0)', 'lab(24%, 0, 0)', 'lab(25%, 0, 0)', 'lab(26%, 0, 0)', 'lab(27%, 0, 0)', 'lab(28%, 0, 0)', 'lab(29%, 0, 0)', 'lab(30%, 0, 0)', 'lab(31%, 0, 0)', 'lab(32%, 0, 0)', 'lab(33%, 0, 0)', 'lab(34%, 0, 0)', 'lab(35%, 0, 0)', 'lab(36%, 0, 0)', 'lab(37%, 0, 0)', 'lab(38%, 0, 0)', 'lab(39%, 0, 0)', 'lab(40%, 0, 0)', 'lab(41%, 0, 0)', 'lab(42%, 0, 0)', 'lab(43%, 0, 0)', 'lab(44%, 0, 0)', 'lab(45%, 0, 0)', 'lab(46%, 0, 0)', 'lab(47%, 0, 0)', 'lab(48%, 0, 0)', 'lab(49%, 0, 0)', 'lab(50%, 0, 0)', 'lab(51%, 0, 0)', 'lab(52%, 0, 0)', 'lab(53%, 0, 0)', 'lab(54%, 0, 0)', 'lab(55%, 0, 0)', 'lab(56%, 0, 0)', 'lab(57%, 0, 0)', 'lab(58%, 0, 0)', 'lab(59%, 0, 0)', 'lab(60%, 0, 0)', 'lab(61%, 0, 0)', 'lab(62%, 0, 0)', 'lab(63%, 0, 0)', 'lab(64%, 0, 0)', 'lab(65%, 0, 0)', 'lab(66%, 0, 0)', 'lab(67%, 0, 0)', 'lab(68%, 0, 0)', 'lab(69%, 0, 0)', 'lab(70%, 0, 0)', 'lab(71%, 0, 0)', 'lab(72%, 0, 0)', 'lab(73%, 0, 0)', 'lab(74%, 0, 0)', 'lab(75%, 0, 0)', 'lab(76%, 0, 0)', 'lab(77%, 0, 0)', 'lab(78%, 0, 0)', 'lab(79%, 0, 0)', 'lab(80%, 0, 0)', 'lab(81%, 0, 0)', 'lab(82%, 0, 0)', 'lab(83%, 0, 0)', 'lab(84%, 0, 0)', 'lab(85%, 0, 0)', 'lab(86%, 0, 0)', 'lab(87%, 0, 0)', 'lab(88%, 0, 0)', 'lab(89%, 0, 0)', 'lab(90%, 0, 0)', 'lab(91%, 0, 0)', 'lab(92%, 0, 0)', 'lab(93%, 0, 0)', 'lab(94%, 0, 0)', 'lab(95%, 0, 0)', 'lab(96%, 0, 0)', 'lab(97%, 0, 0)', 'lab(98%, 0, 0)', 'lab(99%, 0, 0)', 'lab(100%, 0, 0)']);
});
test('should generate 101 grayscale colors with LAB output)', () => {
  const color = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'] });
  color.output = 'LAB';
  const colors = color.backgroundColorScale;

  expect(colors).toEqual(['lab(0%, 0, 0)', 'lab(1%, 0, 0)', 'lab(2%, 0, 0)', 'lab(3%, 0, 0)', 'lab(4%, 0, 0)', 'lab(5%, 0, 0)', 'lab(6%, 0, 0)', 'lab(7%, 0, 0)', 'lab(8%, 0, 0)', 'lab(9%, 0, 0)', 'lab(10%, 0, 0)', 'lab(11%, 0, 0)', 'lab(12%, 0, 0)', 'lab(13%, 0, 0)', 'lab(14%, 0, 0)', 'lab(15%, 0, 0)', 'lab(16%, 0, 0)', 'lab(17%, 0, 0)', 'lab(18%, 0, 0)', 'lab(19%, 0, 0)', 'lab(20%, 0, 0)', 'lab(21%, 0, 0)', 'lab(22%, 0, 0)', 'lab(23%, 0, 0)', 'lab(24%, 0, 0)', 'lab(25%, 0, 0)', 'lab(26%, 0, 0)', 'lab(27%, 0, 0)', 'lab(28%, 0, 0)', 'lab(29%, 0, 0)', 'lab(30%, 0, 0)', 'lab(31%, 0, 0)', 'lab(32%, 0, 0)', 'lab(33%, 0, 0)', 'lab(34%, 0, 0)', 'lab(35%, 0, 0)', 'lab(36%, 0, 0)', 'lab(37%, 0, 0)', 'lab(38%, 0, 0)', 'lab(39%, 0, 0)', 'lab(40%, 0, 0)', 'lab(41%, 0, 0)', 'lab(42%, 0, 0)', 'lab(43%, 0, 0)', 'lab(44%, 0, 0)', 'lab(45%, 0, 0)', 'lab(46%, 0, 0)', 'lab(47%, 0, 0)', 'lab(48%, 0, 0)', 'lab(49%, 0, 0)', 'lab(50%, 0, 0)', 'lab(51%, 0, 0)', 'lab(52%, 0, 0)', 'lab(53%, 0, 0)', 'lab(54%, 0, 0)', 'lab(55%, 0, 0)', 'lab(56%, 0, 0)', 'lab(57%, 0, 0)', 'lab(58%, 0, 0)', 'lab(59%, 0, 0)', 'lab(60%, 0, 0)', 'lab(61%, 0, 0)', 'lab(62%, 0, 0)', 'lab(63%, 0, 0)', 'lab(64%, 0, 0)', 'lab(65%, 0, 0)', 'lab(66%, 0, 0)', 'lab(67%, 0, 0)', 'lab(68%, 0, 0)', 'lab(69%, 0, 0)', 'lab(70%, 0, 0)', 'lab(71%, 0, 0)', 'lab(72%, 0, 0)', 'lab(73%, 0, 0)', 'lab(74%, 0, 0)', 'lab(75%, 0, 0)', 'lab(76%, 0, 0)', 'lab(77%, 0, 0)', 'lab(78%, 0, 0)', 'lab(79%, 0, 0)', 'lab(80%, 0, 0)', 'lab(81%, 0, 0)', 'lab(82%, 0, 0)', 'lab(83%, 0, 0)', 'lab(84%, 0, 0)', 'lab(85%, 0, 0)', 'lab(86%, 0, 0)', 'lab(87%, 0, 0)', 'lab(88%, 0, 0)', 'lab(89%, 0, 0)', 'lab(90%, 0, 0)', 'lab(91%, 0, 0)', 'lab(92%, 0, 0)', 'lab(93%, 0, 0)', 'lab(94%, 0, 0)', 'lab(95%, 0, 0)', 'lab(96%, 0, 0)', 'lab(97%, 0, 0)', 'lab(98%, 0, 0)', 'lab(99%, 0, 0)', 'lab(100%, 0, 0)']);
});

test('should generate 101 grayscale colors with LCH output)', () => {
  const colors = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'], output: 'LCH' }).backgroundColorScale;

  expect(colors).toEqual(['lch(0%, 0, 0deg)', 'lch(1%, 0, 0deg)', 'lch(2%, 0, 0deg)', 'lch(3%, 0, 0deg)', 'lch(4%, 0, 0deg)', 'lch(5%, 0, 0deg)', 'lch(6%, 0, 0deg)', 'lch(7%, 0, 0deg)', 'lch(8%, 0, 0deg)', 'lch(9%, 0, 0deg)', 'lch(10%, 0, 0deg)', 'lch(11%, 0, 0deg)', 'lch(12%, 0, 0deg)', 'lch(13%, 0, 0deg)', 'lch(14%, 0, 0deg)', 'lch(15%, 0, 0deg)', 'lch(16%, 0, 0deg)', 'lch(17%, 0, 0deg)', 'lch(18%, 0, 0deg)', 'lch(19%, 0, 0deg)', 'lch(20%, 0, 0deg)', 'lch(21%, 0, 0deg)', 'lch(22%, 0, 0deg)', 'lch(23%, 0, 0deg)', 'lch(24%, 0, 0deg)', 'lch(25%, 0, 0deg)', 'lch(26%, 0, 0deg)', 'lch(27%, 0, 0deg)', 'lch(28%, 0, 0deg)', 'lch(29%, 0, 0deg)', 'lch(30%, 0, 0deg)', 'lch(31%, 0, 0deg)', 'lch(32%, 0, 0deg)', 'lch(33%, 0, 0deg)', 'lch(34%, 0, 0deg)', 'lch(35%, 0, 0deg)', 'lch(36%, 0, 0deg)', 'lch(37%, 0, 0deg)', 'lch(38%, 0, 0deg)', 'lch(39%, 0, 0deg)', 'lch(40%, 0, 0deg)', 'lch(41%, 0, 0deg)', 'lch(42%, 0, 0deg)', 'lch(43%, 0, 0deg)', 'lch(44%, 0, 0deg)', 'lch(45%, 0, 0deg)', 'lch(46%, 0, 0deg)', 'lch(47%, 0, 0deg)', 'lch(48%, 0, 0deg)', 'lch(49%, 0, 0deg)', 'lch(50%, 0, 0deg)', 'lch(51%, 0, 0deg)', 'lch(52%, 0, 0deg)', 'lch(53%, 0, 0deg)', 'lch(54%, 0, 0deg)', 'lch(55%, 0, 0deg)', 'lch(56%, 0, 0deg)', 'lch(57%, 0, 0deg)', 'lch(58%, 0, 0deg)', 'lch(59%, 0, 0deg)', 'lch(60%, 0, 0deg)', 'lch(61%, 0, 0deg)', 'lch(62%, 0, 0deg)', 'lch(63%, 0, 0deg)', 'lch(64%, 0, 0deg)', 'lch(65%, 0, 0deg)', 'lch(66%, 0, 0deg)', 'lch(67%, 0, 0deg)', 'lch(68%, 0, 0deg)', 'lch(69%, 0, 0deg)', 'lch(70%, 0, 0deg)', 'lch(71%, 0, 0deg)', 'lch(72%, 0, 0deg)', 'lch(73%, 0, 0deg)', 'lch(74%, 0, 0deg)', 'lch(75%, 0, 0deg)', 'lch(76%, 0, 0deg)', 'lch(77%, 0, 0deg)', 'lch(78%, 0, 0deg)', 'lch(79%, 0, 0deg)', 'lch(80%, 0, 0deg)', 'lch(81%, 0, 0deg)', 'lch(82%, 0, 0deg)', 'lch(83%, 0, 0deg)', 'lch(84%, 0, 0deg)', 'lch(85%, 0, 0deg)', 'lch(86%, 0, 0deg)', 'lch(87%, 0, 0deg)', 'lch(88%, 0, 0deg)', 'lch(89%, 0, 0deg)', 'lch(90%, 0, 0deg)', 'lch(91%, 0, 0deg)', 'lch(92%, 0, 0deg)', 'lch(93%, 0, 0deg)', 'lch(94%, 0, 0deg)', 'lch(95%, 0, 0deg)', 'lch(96%, 0, 0deg)', 'lch(97%, 0, 0deg)', 'lch(98%, 0, 0deg)', 'lch(99%, 0, 0deg)', 'lch(100%, 0, 0deg)']);
});
test('should generate 101 grayscale colors with LCH output)', () => {
  const color = new BackgroundColor({ name: 'Color', colorKeys: ['#ffffff'] });
  color.output = 'LCH';
  const colors = color.backgroundColorScale;

  expect(colors).toEqual(['lch(0%, 0, 0deg)', 'lch(1%, 0, 0deg)', 'lch(2%, 0, 0deg)', 'lch(3%, 0, 0deg)', 'lch(4%, 0, 0deg)', 'lch(5%, 0, 0deg)', 'lch(6%, 0, 0deg)', 'lch(7%, 0, 0deg)', 'lch(8%, 0, 0deg)', 'lch(9%, 0, 0deg)', 'lch(10%, 0, 0deg)', 'lch(11%, 0, 0deg)', 'lch(12%, 0, 0deg)', 'lch(13%, 0, 0deg)', 'lch(14%, 0, 0deg)', 'lch(15%, 0, 0deg)', 'lch(16%, 0, 0deg)', 'lch(17%, 0, 0deg)', 'lch(18%, 0, 0deg)', 'lch(19%, 0, 0deg)', 'lch(20%, 0, 0deg)', 'lch(21%, 0, 0deg)', 'lch(22%, 0, 0deg)', 'lch(23%, 0, 0deg)', 'lch(24%, 0, 0deg)', 'lch(25%, 0, 0deg)', 'lch(26%, 0, 0deg)', 'lch(27%, 0, 0deg)', 'lch(28%, 0, 0deg)', 'lch(29%, 0, 0deg)', 'lch(30%, 0, 0deg)', 'lch(31%, 0, 0deg)', 'lch(32%, 0, 0deg)', 'lch(33%, 0, 0deg)', 'lch(34%, 0, 0deg)', 'lch(35%, 0, 0deg)', 'lch(36%, 0, 0deg)', 'lch(37%, 0, 0deg)', 'lch(38%, 0, 0deg)', 'lch(39%, 0, 0deg)', 'lch(40%, 0, 0deg)', 'lch(41%, 0, 0deg)', 'lch(42%, 0, 0deg)', 'lch(43%, 0, 0deg)', 'lch(44%, 0, 0deg)', 'lch(45%, 0, 0deg)', 'lch(46%, 0, 0deg)', 'lch(47%, 0, 0deg)', 'lch(48%, 0, 0deg)', 'lch(49%, 0, 0deg)', 'lch(50%, 0, 0deg)', 'lch(51%, 0, 0deg)', 'lch(52%, 0, 0deg)', 'lch(53%, 0, 0deg)', 'lch(54%, 0, 0deg)', 'lch(55%, 0, 0deg)', 'lch(56%, 0, 0deg)', 'lch(57%, 0, 0deg)', 'lch(58%, 0, 0deg)', 'lch(59%, 0, 0deg)', 'lch(60%, 0, 0deg)', 'lch(61%, 0, 0deg)', 'lch(62%, 0, 0deg)', 'lch(63%, 0, 0deg)', 'lch(64%, 0, 0deg)', 'lch(65%, 0, 0deg)', 'lch(66%, 0, 0deg)', 'lch(67%, 0, 0deg)', 'lch(68%, 0, 0deg)', 'lch(69%, 0, 0deg)', 'lch(70%, 0, 0deg)', 'lch(71%, 0, 0deg)', 'lch(72%, 0, 0deg)', 'lch(73%, 0, 0deg)', 'lch(74%, 0, 0deg)', 'lch(75%, 0, 0deg)', 'lch(76%, 0, 0deg)', 'lch(77%, 0, 0deg)', 'lch(78%, 0, 0deg)', 'lch(79%, 0, 0deg)', 'lch(80%, 0, 0deg)', 'lch(81%, 0, 0deg)', 'lch(82%, 0, 0deg)', 'lch(83%, 0, 0deg)', 'lch(84%, 0, 0deg)', 'lch(85%, 0, 0deg)', 'lch(86%, 0, 0deg)', 'lch(87%, 0, 0deg)', 'lch(88%, 0, 0deg)', 'lch(89%, 0, 0deg)', 'lch(90%, 0, 0deg)', 'lch(91%, 0, 0deg)', 'lch(92%, 0, 0deg)', 'lch(93%, 0, 0deg)', 'lch(94%, 0, 0deg)', 'lch(95%, 0, 0deg)', 'lch(96%, 0, 0deg)', 'lch(97%, 0, 0deg)', 'lch(98%, 0, 0deg)', 'lch(99%, 0, 0deg)', 'lch(100%, 0, 0deg)']);
});
